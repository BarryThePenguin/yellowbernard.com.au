# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  pages: PagesFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Pages | Global

type Pages implements Node & Document {
  description: String
  openingTimes: String
  address: String
  phone: String
  background: String
  map: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PagesFilter {
  description: StringFilter
  openingTimes: StringFilter
  address: StringFilter
  phone: StringFilter
  background: ImageFilter
  map: ImageFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type GlobalSocial {
  facebook: String
  twitter: String
  instagram: String
}

type Global implements Node & Document {
  title: String!
  logo: String
  background: String
  seoDefaultTitle: String!
  description: String!
  siteUrl: String!
  keywords: String
  social: GlobalSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
}

input GlobalFilter {
  title: StringFilter
  logo: ImageFilter
  background: ImageFilter
  seoDefaultTitle: StringFilter
  description: StringFilter
  siteUrl: StringFilter
  keywords: StringFilter
  social: GlobalSocialFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentUpdateMutation {
  pages: PagesMutation
  global: GlobalMutation
  relativePath: String
}

input DocumentMutation {
  pages: PagesMutation
  global: GlobalMutation
}

input PagesMutation {
  description: String
  openingTimes: String
  address: String
  phone: String
  background: String
  map: String
}

input GlobalSocialMutation {
  facebook: String
  twitter: String
  instagram: String
}

input GlobalMutation {
  title: String
  logo: String
  background: String
  seoDefaultTitle: String
  description: String
  siteUrl: String
  keywords: String
  social: GlobalSocialMutation
}

schema {
  query: Query
  mutation: Mutation
}
  